# 学习记录模板

## 当前进度
日期：2025-07-02
1. 成功填写并保存 requirements.txt 文件，内容为 mss 和 opencv-python。
2. 在虚拟环境下顺利安装了依赖库。
3. 用 pip list 检查已安装库，确认 mss、opencv-python、numpy 均已安装。
4. 成功用tkinter创建并显示了一个807x631像素的窗口。
5. 窗口标题为“AI玩游戏-客户端”，界面可以正常弹出。
6. 解决了VSCode中“无法解析导入mss”的报错。
7. 创建了特征图片文件夹 features，用于集中管理所有特征图片（原双语命名因兼容性问题改为英文）。
8. 手动裁剪并保存了特征图片（如 startbutton.png），所有特征图片已统一放入 features 文件夹。
9. 因OpenCV对中文路径兼容性问题，项目文件命名全部采用英文。
10. 利用OpenCV模板匹配功能，成功实现了特征图片与全屏截图的完美匹配，准确获得了目标区域的坐标。
11. 根据特征图片自动识别并标记了游戏工作区域（807x631），并在截图上可视化标记，便于后续自动化操作。
日期：2025-07-03
12. 将截图、模板匹配、区域标记功能分别用类的方式进行模块化封装，分别放在 features/screenshot.py、features/template_match.py、features/area_marker.py。
13. 主程序 main.py 采用面向对象方式组合调用各功能模块，实现了截图、特征图片匹配、区域标记的完整流程。
14. 优化了TemplateMatcher类，支持返回匹配度，并在主程序中实现了匹配失败的友好提示。

## 学到的知识点
日期：2025-07-02
1. requirements.txt 用于统一管理项目依赖，便于环境复现和团队协作。
2. pip install -r requirements.txt 可以一次性安装所有依赖。
3. pip list 可以查看当前虚拟环境下所有已安装的库。
4. 学会了用venv创建虚拟环境，了解pip安装依赖，掌握mss截图方法。
5. 学会了用tkinter库创建主窗口对象。
6. 掌握了设置窗口标题和指定窗口尺寸的方法。
7. 理解了主事件循环（mainloop）的作用。
8. 在VSCode中开发Python项目时，需要确保Python解释器与虚拟环境一致，否则Pylance等插件无法正确识别依赖库。
9. 项目中文件夹和文件建议采用英文命名，避免中文路径带来的兼容性问题。
10. 掌握了用截图+图片编辑工具手动采集特征图片的方法，理解了特征图片在后续AI识别中的作用。
11. 理解了模板匹配的“匹配度”含义，掌握了如何根据匹配度判断识别结果的可靠性。
12. 掌握了如何根据特征图片位置和已知区域尺寸，自动定位和标记整个游戏工作区域。
日期：2025-07-03
13. 理解了如何用类实现功能模块的封装，提升了代码的复用性和可维护性。
14. 掌握了主程序与功能模块之间的对象调用关系，实现了真正的面向对象编程。
15. 学会了如何在类中封装细节，让主程序只关注“做什么”，而不关心“怎么做”。
16. 了解了如何通过返回值和方法设计，让主程序结构更简洁、逻辑更清晰。

## 遇到的问题与解决方法
日期：2025-07-02
1. requirements.txt 文件最初为空，导致依赖未被安装。
2. 补充并保存正确内容后，重新安装依赖，问题解决。
3. VSCode未自动识别虚拟环境，手动切换Python解释器后，Pylance可以正常识别mss库，报错消失。
4. 在PowerShell中激活虚拟环境时遇到“无法加载文件”权限问题，通过Set-ExecutionPolicy命令临时放开权限后解决。
5. OpenCV无法读取含有中文路径的图片文件，改用英文命名后问题解决。
日期：2025-07-03
6. 初始主程序中匹配和判断逻辑较为冗余，后通过优化TemplateMatcher类，将判断和提示逻辑封装到类内部，主程序变得更简洁。
7. 通过调整类的接口设计，实现了更高的面向对象和模块化水平。

## 个人感想/疑问
日期：2025-07-02
1. 对 requirements.txt 的作用有了实际体会，遇到依赖未安装时要先检查文件内容。
2. 通过实际操作，掌握了 pip 的基本用法。
3. 第一次用tkinter创建窗口，感觉很直观，适合做简单的界面开发。
4. 遇到IDE报错时，除了看代码本身，还要注意开发环境的配置。
5. 文件命名规范对跨平台开发和工具兼容性影响很大。
6. 通过特征图片和模板匹配，可以高效、自动地定位和标记游戏窗口区域，极大提升了自动化开发效率。
日期：2025-07-03
7. 通过本次重构，深刻体会到面向对象和模块化设计对项目结构和开发效率的提升。
8. 代码结构更清晰，后续扩展和维护会更加方便。
9. 对Python项目的专业开发流程有了更直观的认识。

## 中英互译
features —— 特征（功能模块文件夹）
screenshot.py —— 截图功能模块
area_marker.py —— 区域标记功能模块
template_match.py —— 模板匹配功能模块
feature.png —— 特征图片
main.py —— 主程序
find_work_area.py —— 查找工作区域脚本
match_result.png —— 匹配结果图片
screenshot.png —— 截图图片
work_area.png —— 工作区域标记图片
test_opencv_match.py —— 测试OpenCV模板匹配脚本
test_mss.py —— 测试mss截图脚本
test_window.py —— 测试窗口脚本
requirements.txt —— 依赖清单
README.md —— 项目说明

---

> 每完成一个阶段，建议都记录一次，方便后续复盘和总结。 